#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

typedef struct Node
{
    int data;
    struct Node * next;
}LL;

LL * head=NULL;
LL * head1 = NULL;
struct Node * createNode(int element)
{
    LL * new=(struct Node*)malloc(sizeof(LL));
    if(new==NULL)
    {
        printf("nO Memory");
        exit(0);
    }
    else
    {
        new->data=element;
        new->next=NULL;
    }
    return new;
}

void insertF()
{
    int ele;
    printf("Enter element to be inserted\n");
    scanf("%d",&ele);
    LL * nn=createNode(ele);
    if(head==NULL)
    {
        head=nn;
    }
    else
    {
        nn->next=head;
        head=nn;
    }
}



void insertBhead1()
{
    int ele;
    printf("Enter element to be inserted\n");
    scanf("%d",&ele);
    LL * nn=createNode(ele);
    if(head==NULL)
    {
        head=nn;
    }
    else
    {
        LL * temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=nn;
    }
}

void insertBhead2()
{
    int ele;
    printf("Enter element to be inserted\n");
    scanf("%d",&ele);
    LL * nn=createNode(ele);
    if(head1==NULL)
    {
        head1=nn;
    }
    else
    {
        LL * temp=head1;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=nn;
    }
}




void sort()
{
    LL *current=head;
    LL*temp=head;
    int a;
    while(current!=NULL)
    {
        temp=current->next;
        while(temp!=NULL)
        {
            if(current->data > temp->data)
            {
                a=current->data;
                current->data=temp->data;
                temp->data=a;
            }
            temp=temp->next;
        }
        current=current->next;
    }
}

void concat()
{
    if(head==NULL)
    {
        head=head1;
    }
    else
    {
        LL * temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=head1;
    }
}

void reverse()
{
    if(head==NULL || head->next==NULL)
    {
        printf("ll CANNOT be reversed");
    }
    else
    {
        LL * current=head;
        LL * n = NULL;
        LL * p=NULL;
        while(current!=NULL)
        {
            n=current->next;
            current->next=p;
            p=current;
            current=n;
        }
        head=p;
    }
}

void display()
{
    LL * temp =head;
    printf("LL elements are: \n");
    while(temp!=NULL)
    {
        printf("%d\t",temp->data);
        temp=temp->next;
    }
}



void main()
{
    int choice;
    while (1)
    {
        printf("Press\n1.Insert at Front LL1\n2.Insert at Back LL1\n3.Insert at Back of LL2\n4.sort\n5.concat\n6.reverse\n7.Display\n8.Exit\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            insertF();
            break;

        case 2:
            insertBhead1();
            break;
            
        case 3: insertBhead2();
                break;

        case 4: sort();
                break;
                
        case 5: concat();
                 break;
                 
        case 6: reverse();
                 break;
                 
        case 7:
            display();
            break;

        case 8:
            exit(0);

        default:
            printf("Enter valid choice\n");
        }
    }

}
