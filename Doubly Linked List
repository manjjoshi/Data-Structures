#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

typedef struct Node
{
    int data;
    struct Node * next;
    struct Node * prev;
}LL;

LL * head=NULL;

struct Node * createNode(int ele)
{
    LL * new=(struct Node *)malloc(sizeof(LL));
    if(new==NULL)
    {
        printf("No Memory allocated");
        exit(0);
    }
    else
    {
        new->data=ele;
        new->next=NULL;
        new->prev=NULL;
    }
    return new;
}



void insertB()
{
    int ele;
    printf("enter element to be inserted\n");
    scanf("%d",&ele);
    LL * nn=createNode(ele);
    if(head==NULL)
    {
        head=nn;
    }
    else
    {
        LL *temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=nn;
        nn->prev=temp;
    }
}

void insertBeforeVal(int val)
{
    int ele;
    printf("Enter element to be inserted\n");
    scanf("%d",&ele);
    LL * nn=createNode(ele);
    if(head==NULL)
    {
        head=nn;
    }
    else
    {
        LL * temp=head;
        while(temp->data!=val && temp!=NULL)
        {
            temp=temp->next;
        }
        nn->prev=temp->prev;
        temp->prev->next=nn;
        temp->prev=nn;
        nn->next=temp;
    }
}


int deleteAtVal(int val)
{
    int ele;
    if(head==NULL)
    {
        printf("LL is empty");
        return 0;
    }
    else
    {
        LL * temp=head;
        while(temp->data!=val && temp!=NULL)
        {
            temp=temp->next;
        }
        temp->prev->next=temp->next;
        temp->next->prev=temp->prev;
        ele=temp->data;
        free(temp);
        temp=NULL;
    }
    return ele;
}

void display()
{
    LL * temp =head;
    printf("LL elements are: \n");
    while(temp!=NULL)
    {
        printf("%d\t",temp->data);
        temp=temp->next;
    }
}

void main()
{

    int val;
    int delele;
    int choice;
    while (1)
    {
        printf("Press\n1.Insert at Back\n2.Insert Before Val\n3.Delete at val\n4.Display\n5.Exit\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            insertB();
            break;

        case 2:
            printf("Enter VAL\n");
            scanf("%d",&val);
            insertBeforeVal(val);
            break;

        case 3:
            printf("Enter VAL \n");
            scanf("%d", &val);
            delele = deleteAtVal(val);
            printf("Deleted element is %d\n", delele);
            break;


        case 4:
            display();
            break;

        case 5:
            exit(0);

        default:
            printf("Enter valid choice\n");
        }
    }
}
